basePath: /
definitions:
  domain.Headers:
    properties:
      HTTPStatusCode:
        type: integer
      authentication:
        type: string
      error:
        type: string
      headers:
        additionalProperties:
          type: string
        type: object
      responseHeaders:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      responseLength:
        type: integer
    type: object
  domain.Task:
    properties:
      headers:
        $ref: '#/definitions/domain.Headers'
      id:
        example: 1
        type: integer
      method:
        example: GET
        type: string
      task_status:
        allOf:
        - $ref: '#/definitions/domain.TaskStatus'
        example: new
      url:
        example: http://google.com
        type: string
    type: object
  domain.TaskCreateInput:
    properties:
      headers:
        $ref: '#/definitions/domain.Headers'
      method:
        example: GET
        type: string
      task_status:
        allOf:
        - $ref: '#/definitions/domain.TaskStatus'
        example: new
      url:
        example: http://google.com
        type: string
    type: object
  domain.TaskResponse:
    properties:
      id:
        type: integer
    type: object
  domain.TaskStatus:
    enum:
    - new
    - in_process
    - done
    - error
    type: string
    x-enum-varnames:
    - TaskStatusNew
    - TaskStatusInProcess
    - TaskStatusDone
    - TaskStatusError
  domain.TaskUpdateInput:
    properties:
      status:
        $ref: '#/definitions/domain.TaskStatus'
    required:
    - status
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a server API.
  title: Server API
  version: "1.0"
paths:
  /task:
    get:
      consumes:
      - application/json
      description: Get details of all tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Task'
            type: array
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the input payload
      parameters:
      - description: Create task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/domain.TaskCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.TaskResponse'
      summary: Create a new task
      tags:
      - tasks
  /task/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get details of a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task's status by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/domain.TaskUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update a task
      tags:
      - tasks
swagger: "2.0"
